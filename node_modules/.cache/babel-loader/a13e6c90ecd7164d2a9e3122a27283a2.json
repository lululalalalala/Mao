{"ast":null,"code":"var echarts = require('echarts/lib/echarts');\n\nvar numberUtil = echarts.number;\n\nvar symbolUtil = require('echarts/lib/util/symbol');\n\nvar parsePercent = numberUtil.parsePercent;\n\nvar LiquidLayout = require('./liquidFillLayout');\n\nfunction getShallow(model, path) {\n  return model && model.getShallow(path);\n}\n\necharts.extendChartView({\n  type: 'liquidFill',\n  render: function (seriesModel, ecModel, api) {\n    var group = this.group;\n    group.removeAll();\n    var data = seriesModel.getData();\n    var itemModel = data.getItemModel(0);\n    var center = itemModel.get('center');\n    var radius = itemModel.get('radius');\n    var width = api.getWidth();\n    var height = api.getHeight();\n    var size = Math.min(width, height); // itemStyle\n\n    var outlineDistance = 0;\n    var outlineBorderWidth = 0;\n    var showOutline = seriesModel.get('outline.show');\n\n    if (showOutline) {\n      outlineDistance = seriesModel.get('outline.borderDistance');\n      outlineBorderWidth = parsePercent(seriesModel.get('outline.itemStyle.borderWidth'), size);\n    }\n\n    var cx = parsePercent(center[0], width);\n    var cy = parsePercent(center[1], height);\n    var outterRadius;\n    var innerRadius;\n    var paddingRadius;\n    var isFillContainer = false;\n    var symbol = seriesModel.get('shape');\n\n    if (symbol === 'container') {\n      // a shape that fully fills the container\n      isFillContainer = true;\n      outterRadius = [width / 2, height / 2];\n      innerRadius = [outterRadius[0] - outlineBorderWidth / 2, outterRadius[1] - outlineBorderWidth / 2];\n      paddingRadius = [parsePercent(outlineDistance, width), parsePercent(outlineDistance, height)];\n      radius = [Math.max(innerRadius[0] - paddingRadius[0], 0), Math.max(innerRadius[1] - paddingRadius[1], 0)];\n    } else {\n      outterRadius = parsePercent(radius, size) / 2;\n      innerRadius = outterRadius - outlineBorderWidth / 2;\n      paddingRadius = parsePercent(outlineDistance, size);\n      radius = Math.max(innerRadius - paddingRadius, 0);\n    }\n\n    if (showOutline) {\n      var outline = getOutline();\n      outline.style.lineWidth = outlineBorderWidth;\n      group.add(getOutline());\n    }\n\n    var left = isFillContainer ? 0 : cx - radius;\n    var top = isFillContainer ? 0 : cy - radius;\n    var wavePath = null;\n    group.add(getBackground()); // each data item for a wave\n\n    var oldData = this._data;\n    var waves = [];\n    data.diff(oldData).add(function (idx) {\n      var wave = getWave(idx, false);\n      var waterLevel = wave.shape.waterLevel;\n      wave.shape.waterLevel = isFillContainer ? height / 2 : radius;\n      echarts.graphic.initProps(wave, {\n        shape: {\n          waterLevel: waterLevel\n        }\n      }, seriesModel);\n      wave.z2 = 2;\n      setWaveAnimation(idx, wave, null);\n      group.add(wave);\n      data.setItemGraphicEl(idx, wave);\n      waves.push(wave);\n    }).update(function (newIdx, oldIdx) {\n      var waveElement = oldData.getItemGraphicEl(oldIdx); // new wave is used to calculate position, but not added\n\n      var newWave = getWave(newIdx, false, waveElement); // changes with animation\n\n      var shape = {};\n      var shapeAttrs = ['amplitude', 'cx', 'cy', 'phase', 'radius', 'radiusY', 'waterLevel', 'waveLength'];\n\n      for (var i = 0; i < shapeAttrs.length; ++i) {\n        var attr = shapeAttrs[i];\n\n        if (newWave.shape.hasOwnProperty(attr)) {\n          shape[attr] = newWave.shape[attr];\n        }\n      }\n\n      var style = {};\n      var styleAttrs = ['fill', 'opacity', 'shadowBlur', 'shadowColor'];\n\n      for (var i = 0; i < styleAttrs.length; ++i) {\n        var attr = styleAttrs[i];\n\n        if (newWave.style.hasOwnProperty(attr)) {\n          style[attr] = newWave.style[attr];\n        }\n      }\n\n      if (isFillContainer) {\n        shape.radiusY = height / 2;\n      } // changes with animation\n\n\n      echarts.graphic.updateProps(waveElement, {\n        shape: shape\n      }, seriesModel);\n      waveElement.useStyle(style); // instant changes\n\n      waveElement.position = newWave.position;\n      waveElement.setClipPath(newWave.clipPath);\n      waveElement.shape.inverse = newWave.inverse;\n      setWaveAnimation(newIdx, waveElement, waveElement);\n      group.add(waveElement);\n      data.setItemGraphicEl(newIdx, waveElement);\n      waves.push(waveElement);\n    }).remove(function (idx) {\n      var wave = oldData.getItemGraphicEl(idx);\n      group.remove(wave);\n    }).execute();\n\n    if (itemModel.get('label.show')) {\n      group.add(getText(waves));\n    }\n\n    this._data = data;\n    /**\n     * Get path for outline, background and clipping\n     *\n     * @param {number} r outter radius of shape\n     * @param {boolean|undefined} isForClipping if the shape is used\n     *                                          for clipping\n     */\n\n    function getPath(r, isForClipping) {\n      if (symbol) {\n        // customed symbol path\n        if (symbol.indexOf('path://') === 0) {\n          var path = echarts.graphic.makePath(symbol.slice(7), {});\n          var bouding = path.getBoundingRect();\n          var w = bouding.width;\n          var h = bouding.height;\n\n          if (w > h) {\n            h = r * 2 / w * h;\n            w = r * 2;\n          } else {\n            w = r * 2 / h * w;\n            h = r * 2;\n          }\n\n          var left = isForClipping ? 0 : cx - w / 2;\n          var top = isForClipping ? 0 : cy - h / 2;\n          path = echarts.graphic.makePath(symbol.slice(7), {}, new echarts.graphic.BoundingRect(left, top, w, h));\n\n          if (isForClipping) {\n            path.position = [-w / 2, -h / 2];\n          }\n\n          return path;\n        } else if (isFillContainer) {\n          // fully fill the container\n          var x = isForClipping ? -r[0] : cx - r[0];\n          var y = isForClipping ? -r[1] : cy - r[1];\n          return symbolUtil.createSymbol('rect', x, y, r[0] * 2, r[1] * 2);\n        } else {\n          var x = isForClipping ? -r : cx - r;\n          var y = isForClipping ? -r : cy - r;\n\n          if (symbol === 'pin') {\n            y += r;\n          } else if (symbol === 'arrow') {\n            y -= r;\n          }\n\n          return symbolUtil.createSymbol(symbol, x, y, r * 2, r * 2);\n        }\n      }\n\n      return new echarts.graphic.Circle({\n        shape: {\n          cx: isForClipping ? 0 : cx,\n          cy: isForClipping ? 0 : cy,\n          r: r\n        }\n      });\n    }\n    /**\n     * Create outline\n     */\n\n\n    function getOutline() {\n      var outlinePath = getPath(outterRadius);\n      outlinePath.style.fill = null;\n      outlinePath.setStyle(seriesModel.getModel('outline.itemStyle').getItemStyle());\n      return outlinePath;\n    }\n    /**\n     * Create background\n     */\n\n\n    function getBackground() {\n      // Seperate stroke and fill, so we can use stroke to cover the alias of clipping.\n      var strokePath = getPath(radius);\n      strokePath.setStyle(seriesModel.getModel('backgroundStyle').getItemStyle());\n      strokePath.style.fill = null; // Stroke is front of wave\n\n      strokePath.z2 = 5;\n      var fillPath = getPath(radius);\n      fillPath.setStyle(seriesModel.getModel('backgroundStyle').getItemStyle());\n      fillPath.style.stroke = null;\n      var group = new echarts.graphic.Group();\n      group.add(strokePath);\n      group.add(fillPath);\n      return group;\n    }\n    /**\n     * wave shape\n     */\n\n\n    function getWave(idx, isInverse, oldWave) {\n      var radiusX = isFillContainer ? radius[0] : radius;\n      var radiusY = isFillContainer ? height / 2 : radius;\n      var itemModel = data.getItemModel(idx);\n      var itemStyleModel = itemModel.getModel('itemStyle');\n      var phase = itemModel.get('phase');\n      var amplitude = parsePercent(itemModel.get('amplitude'), radiusY * 2);\n      var waveLength = parsePercent(itemModel.get('waveLength'), radiusX * 2);\n      var value = data.get('value', idx);\n      var waterLevel = radiusY - value * radiusY * 2;\n      phase = oldWave ? oldWave.shape.phase : phase === 'auto' ? idx * Math.PI / 4 : phase;\n      var normalStyle = itemStyleModel.getItemStyle();\n\n      if (!normalStyle.fill) {\n        var seriesColor = seriesModel.get('color');\n        var id = idx % seriesColor.length;\n        normalStyle.fill = seriesColor[id];\n      }\n\n      var x = radiusX * 2;\n      var wave = new LiquidLayout({\n        shape: {\n          waveLength: waveLength,\n          radius: radiusX,\n          radiusY: radiusY,\n          cx: x,\n          cy: 0,\n          waterLevel: waterLevel,\n          amplitude: amplitude,\n          phase: phase,\n          inverse: isInverse\n        },\n        style: normalStyle,\n        position: [cx, cy]\n      });\n      wave.shape._waterLevel = waterLevel;\n      var hoverStyle = itemModel.getModel('emphasis.itemStyle').getItemStyle();\n      hoverStyle.lineWidth = 0;\n      echarts.graphic.setHoverStyle(wave, hoverStyle); // clip out the part outside the circle\n\n      var clip = getPath(radius, true); // set fill for clipPath, otherwise it will not trigger hover event\n\n      clip.setStyle({\n        fill: 'white'\n      });\n      wave.setClipPath(clip);\n      return wave;\n    }\n\n    function setWaveAnimation(idx, wave, oldWave) {\n      var itemModel = data.getItemModel(idx);\n      var maxSpeed = itemModel.get('period');\n      var direction = itemModel.get('direction');\n      var value = data.get('value', idx);\n      var phase = itemModel.get('phase');\n      phase = oldWave ? oldWave.shape.phase : phase === 'auto' ? idx * Math.PI / 4 : phase;\n\n      var defaultSpeed = function (maxSpeed) {\n        var cnt = data.count();\n        return cnt === 0 ? maxSpeed : maxSpeed * (0.2 + (cnt - idx) / cnt * 0.8);\n      };\n\n      var speed = 0;\n\n      if (maxSpeed === 'auto') {\n        speed = defaultSpeed(5000);\n      } else {\n        speed = typeof maxSpeed === 'function' ? maxSpeed(value, idx) : maxSpeed;\n      } // phase for moving left/right\n\n\n      var phaseOffset = 0;\n\n      if (direction === 'right' || direction == null) {\n        phaseOffset = Math.PI;\n      } else if (direction === 'left') {\n        phaseOffset = -Math.PI;\n      } else if (direction === 'none') {\n        phaseOffset = 0;\n      } else {\n        console.error('Illegal direction value for liquid fill.');\n      } // wave animation of moving left/right\n\n\n      if (direction !== 'none' && itemModel.get('waveAnimation')) {\n        wave.animate('shape', true).when(0, {\n          phase: phase\n        }).when(speed / 2, {\n          phase: phaseOffset + phase\n        }).when(speed, {\n          phase: phaseOffset * 2 + phase\n        }).during(function () {\n          if (wavePath) {\n            wavePath.dirty(true);\n          }\n        }).start();\n      }\n    }\n    /**\n     * text on wave\n     */\n\n\n    function getText(waves) {\n      var labelModel = itemModel.getModel('label');\n\n      function formatLabel() {\n        var formatted = seriesModel.getFormattedLabel(0, 'normal');\n        var defaultVal = data.get('value', 0) * 100;\n        var defaultLabel = data.getName(0) || seriesModel.name;\n\n        if (!isNaN(defaultVal)) {\n          defaultLabel = defaultVal.toFixed(0) + '%';\n        }\n\n        return formatted == null ? defaultLabel : formatted;\n      }\n\n      var textOption = {\n        z2: 10,\n        shape: {\n          x: left,\n          y: top,\n          width: (isFillContainer ? radius[0] : radius) * 2,\n          height: (isFillContainer ? radius[1] : radius) * 2\n        },\n        style: {\n          fill: 'transparent',\n          text: formatLabel(),\n          textAlign: labelModel.get('align'),\n          textVerticalAlign: labelModel.get('baseline')\n        },\n        silent: true\n      };\n      var outsideTextRect = new echarts.graphic.Rect(textOption);\n      var color = labelModel.get('color');\n      echarts.graphic.setText(outsideTextRect.style, labelModel, color);\n      var insideTextRect = new echarts.graphic.Rect(textOption);\n      var insColor = labelModel.get('insideColor');\n      echarts.graphic.setText(insideTextRect.style, labelModel, insColor);\n      insideTextRect.style.textFill = insColor;\n      var group = new echarts.graphic.Group();\n      group.add(outsideTextRect);\n      group.add(insideTextRect); // clip out waves for insideText\n\n      var boundingCircle = getPath(radius, true);\n      wavePath = new echarts.graphic.CompoundPath({\n        shape: {\n          paths: waves\n        },\n        position: [cx, cy]\n      });\n      wavePath.setClipPath(boundingCircle);\n      insideTextRect.setClipPath(wavePath);\n      return group;\n    }\n  },\n  dispose: function () {// dispose nothing here\n  }\n});","map":{"version":3,"names":["echarts","require","numberUtil","number","symbolUtil","parsePercent","LiquidLayout","getShallow","model","path","extendChartView","type","render","seriesModel","ecModel","api","group","removeAll","data","getData","itemModel","getItemModel","center","get","radius","width","getWidth","height","getHeight","size","Math","min","outlineDistance","outlineBorderWidth","showOutline","cx","cy","outterRadius","innerRadius","paddingRadius","isFillContainer","symbol","max","outline","getOutline","style","lineWidth","add","left","top","wavePath","getBackground","oldData","_data","waves","diff","idx","wave","getWave","waterLevel","shape","graphic","initProps","z2","setWaveAnimation","setItemGraphicEl","push","update","newIdx","oldIdx","waveElement","getItemGraphicEl","newWave","shapeAttrs","i","length","attr","hasOwnProperty","styleAttrs","radiusY","updateProps","useStyle","position","setClipPath","clipPath","inverse","remove","execute","getText","getPath","r","isForClipping","indexOf","makePath","slice","bouding","getBoundingRect","w","h","BoundingRect","x","y","createSymbol","Circle","outlinePath","fill","setStyle","getModel","getItemStyle","strokePath","fillPath","stroke","Group","isInverse","oldWave","radiusX","itemStyleModel","phase","amplitude","waveLength","value","PI","normalStyle","seriesColor","id","_waterLevel","hoverStyle","setHoverStyle","clip","maxSpeed","direction","defaultSpeed","cnt","count","speed","phaseOffset","console","error","animate","when","during","dirty","start","labelModel","formatLabel","formatted","getFormattedLabel","defaultVal","defaultLabel","getName","name","isNaN","toFixed","textOption","text","textAlign","textVerticalAlign","silent","outsideTextRect","Rect","color","setText","insideTextRect","insColor","textFill","boundingCircle","CompoundPath","paths","dispose"],"sources":["D:/vue/Mao/node_modules/v-charts/node_modules/echarts-liquidfill/src/liquidFillView.js"],"sourcesContent":["var echarts = require('echarts/lib/echarts');\nvar numberUtil = echarts.number;\nvar symbolUtil = require('echarts/lib/util/symbol');\nvar parsePercent = numberUtil.parsePercent;\n\nvar LiquidLayout = require('./liquidFillLayout');\n\nfunction getShallow(model, path) {\n    return model && model.getShallow(path);\n}\n\necharts.extendChartView({\n\n    type: 'liquidFill',\n\n    render: function (seriesModel, ecModel, api) {\n        var group = this.group;\n        group.removeAll();\n\n        var data = seriesModel.getData();\n\n        var itemModel = data.getItemModel(0);\n\n        var center = itemModel.get('center');\n        var radius = itemModel.get('radius');\n\n        var width = api.getWidth();\n        var height = api.getHeight();\n        var size = Math.min(width, height);\n        // itemStyle\n        var outlineDistance = 0;\n        var outlineBorderWidth = 0;\n        var showOutline = seriesModel.get('outline.show');\n\n        if (showOutline) {\n            outlineDistance = seriesModel.get('outline.borderDistance');\n            outlineBorderWidth = parsePercent(\n                seriesModel.get('outline.itemStyle.borderWidth'), size\n            );\n        }\n\n        var cx = parsePercent(center[0], width);\n        var cy = parsePercent(center[1], height);\n\n        var outterRadius;\n        var innerRadius;\n        var paddingRadius;\n\n        var isFillContainer = false;\n\n        var symbol = seriesModel.get('shape');\n        if (symbol === 'container') {\n            // a shape that fully fills the container\n            isFillContainer = true;\n\n            outterRadius = [\n                width / 2,\n                height / 2\n            ];\n            innerRadius = [\n                outterRadius[0] - outlineBorderWidth / 2,\n                outterRadius[1] - outlineBorderWidth / 2\n            ];\n            paddingRadius = [\n                parsePercent(outlineDistance, width),\n                parsePercent(outlineDistance, height)\n            ];\n\n            radius = [\n                Math.max(innerRadius[0] - paddingRadius[0], 0),\n                Math.max(innerRadius[1] - paddingRadius[1], 0)\n            ];\n        }\n        else {\n            outterRadius = parsePercent(radius, size) / 2;\n            innerRadius = outterRadius - outlineBorderWidth / 2;\n            paddingRadius = parsePercent(outlineDistance, size);\n\n            radius = Math.max(innerRadius - paddingRadius, 0);\n        }\n\n        if (showOutline) {\n            var outline = getOutline();\n            outline.style.lineWidth = outlineBorderWidth;\n            group.add(getOutline());\n        }\n\n        var left = isFillContainer ? 0 : cx - radius;\n        var top = isFillContainer ? 0 : cy - radius;\n\n        var wavePath = null;\n\n        group.add(getBackground());\n\n        // each data item for a wave\n        var oldData = this._data;\n        var waves = [];\n        data.diff(oldData)\n            .add(function (idx) {\n                var wave = getWave(idx, false);\n\n                var waterLevel = wave.shape.waterLevel;\n                wave.shape.waterLevel = isFillContainer ? height / 2 : radius;\n                echarts.graphic.initProps(wave, {\n                    shape: {\n                        waterLevel: waterLevel\n                    }\n                }, seriesModel);\n\n                wave.z2 = 2;\n                setWaveAnimation(idx, wave, null);\n\n                group.add(wave);\n                data.setItemGraphicEl(idx, wave);\n                waves.push(wave);\n            })\n            .update(function (newIdx, oldIdx) {\n                var waveElement = oldData.getItemGraphicEl(oldIdx);\n\n                // new wave is used to calculate position, but not added\n                var newWave = getWave(newIdx, false, waveElement);\n\n                // changes with animation\n                var shape = {};\n                var shapeAttrs = ['amplitude', 'cx', 'cy', 'phase', 'radius', 'radiusY', 'waterLevel', 'waveLength'];\n                for (var i = 0; i < shapeAttrs.length; ++i) {\n                    var attr = shapeAttrs[i];\n                    if (newWave.shape.hasOwnProperty(attr)) {\n                        shape[attr] = newWave.shape[attr];\n                    }\n                }\n\n                var style = {};\n                var styleAttrs = ['fill', 'opacity', 'shadowBlur', 'shadowColor'];\n                for (var i = 0; i < styleAttrs.length; ++i) {\n                    var attr = styleAttrs[i];\n                    if (newWave.style.hasOwnProperty(attr)) {\n                        style[attr] = newWave.style[attr];\n                    }\n                }\n\n                if (isFillContainer) {\n                    shape.radiusY = height / 2;\n                }\n\n                // changes with animation\n                echarts.graphic.updateProps(waveElement, {\n                    shape: shape\n                }, seriesModel);\n\n                waveElement.useStyle(style);\n\n                // instant changes\n                waveElement.position = newWave.position;\n                waveElement.setClipPath(newWave.clipPath);\n                waveElement.shape.inverse = newWave.inverse;\n\n                setWaveAnimation(newIdx, waveElement, waveElement);\n                group.add(waveElement);\n                data.setItemGraphicEl(newIdx, waveElement);\n                waves.push(waveElement);\n            })\n            .remove(function (idx) {\n                var wave = oldData.getItemGraphicEl(idx);\n                group.remove(wave);\n            })\n            .execute();\n\n        if (itemModel.get('label.show')) {\n            group.add(getText(waves));\n        }\n\n        this._data = data;\n\n        /**\n         * Get path for outline, background and clipping\n         *\n         * @param {number} r outter radius of shape\n         * @param {boolean|undefined} isForClipping if the shape is used\n         *                                          for clipping\n         */\n        function getPath(r, isForClipping) {\n            if (symbol) {\n                // customed symbol path\n                if (symbol.indexOf('path://') === 0) {\n                    var path = echarts.graphic.makePath(symbol.slice(7), {});\n                    var bouding = path.getBoundingRect();\n                    var w = bouding.width;\n                    var h = bouding.height;\n                    if (w > h) {\n                        h = r * 2 / w * h;\n                        w = r * 2;\n                    }\n                    else {\n                        w = r * 2 / h * w;\n                        h = r * 2;\n                    }\n\n                    var left = isForClipping ? 0 : cx - w / 2;\n                    var top = isForClipping ? 0 : cy - h / 2;\n                    path = echarts.graphic.makePath(\n                        symbol.slice(7),\n                        {},\n                        new echarts.graphic.BoundingRect(left, top, w, h)\n                    );\n                    if (isForClipping) {\n                        path.position = [-w / 2, -h / 2];\n                    }\n                    return path;\n                }\n                else if (isFillContainer) {\n                    // fully fill the container\n                    var x = isForClipping ? -r[0] : cx - r[0];\n                    var y = isForClipping ? -r[1] : cy - r[1];\n                    return symbolUtil.createSymbol(\n                        'rect', x, y, r[0] * 2, r[1] * 2\n                    );\n                }\n                else {\n                    var x = isForClipping ? -r : cx - r;\n                    var y = isForClipping ? -r : cy - r;\n                    if (symbol === 'pin') {\n                        y += r;\n                    }\n                    else if (symbol === 'arrow') {\n                        y -= r;\n                    }\n                    return symbolUtil.createSymbol(symbol, x, y, r * 2, r * 2);\n                }\n            }\n\n            return new echarts.graphic.Circle({\n                shape: {\n                    cx: isForClipping ? 0 : cx,\n                    cy: isForClipping ? 0 : cy,\n                    r: r\n                }\n            });\n        }\n        /**\n         * Create outline\n         */\n        function getOutline() {\n            var outlinePath = getPath(outterRadius);\n            outlinePath.style.fill = null;\n\n            outlinePath.setStyle(seriesModel.getModel('outline.itemStyle')\n                .getItemStyle());\n\n            return outlinePath;\n        }\n\n        /**\n         * Create background\n         */\n        function getBackground() {\n            // Seperate stroke and fill, so we can use stroke to cover the alias of clipping.\n            var strokePath = getPath(radius);\n            strokePath.setStyle(seriesModel.getModel('backgroundStyle')\n                .getItemStyle());\n            strokePath.style.fill = null;\n\n            // Stroke is front of wave\n            strokePath.z2 = 5;\n\n            var fillPath = getPath(radius);\n            fillPath.setStyle(seriesModel.getModel('backgroundStyle')\n                .getItemStyle());\n            fillPath.style.stroke = null;\n\n            var group = new echarts.graphic.Group();\n            group.add(strokePath);\n            group.add(fillPath);\n\n            return group;\n        }\n\n        /**\n         * wave shape\n         */\n        function getWave(idx, isInverse, oldWave) {\n            var radiusX = isFillContainer ? radius[0] : radius;\n            var radiusY = isFillContainer ? height / 2 : radius;\n\n            var itemModel = data.getItemModel(idx);\n            var itemStyleModel = itemModel.getModel('itemStyle');\n            var phase = itemModel.get('phase');\n            var amplitude = parsePercent(itemModel.get('amplitude'),\n                radiusY * 2);\n            var waveLength = parsePercent(itemModel.get('waveLength'),\n                radiusX * 2);\n\n            var value = data.get('value', idx);\n            var waterLevel = radiusY - value * radiusY * 2;\n            phase = oldWave ? oldWave.shape.phase\n                : (phase === 'auto' ? idx * Math.PI / 4 : phase);\n            var normalStyle = itemStyleModel.getItemStyle();\n            if (!normalStyle.fill) {\n                var seriesColor = seriesModel.get('color');\n                var id = idx % seriesColor.length;\n                normalStyle.fill = seriesColor[id];\n            }\n\n            var x = radiusX * 2;\n            var wave = new LiquidLayout({\n                shape: {\n                    waveLength: waveLength,\n                    radius: radiusX,\n                    radiusY: radiusY,\n                    cx: x,\n                    cy: 0,\n                    waterLevel: waterLevel,\n                    amplitude: amplitude,\n                    phase: phase,\n                    inverse: isInverse\n                },\n                style: normalStyle,\n                position: [cx, cy]\n            });\n            wave.shape._waterLevel = waterLevel;\n\n            var hoverStyle = itemModel.getModel('emphasis.itemStyle')\n                .getItemStyle();\n            hoverStyle.lineWidth = 0;\n            echarts.graphic.setHoverStyle(wave, hoverStyle);\n\n            // clip out the part outside the circle\n            var clip = getPath(radius, true);\n            // set fill for clipPath, otherwise it will not trigger hover event\n            clip.setStyle({\n                fill: 'white'\n            });\n            wave.setClipPath(clip);\n\n            return wave;\n        }\n\n        function setWaveAnimation(idx, wave, oldWave) {\n            var itemModel = data.getItemModel(idx);\n\n            var maxSpeed = itemModel.get('period');\n            var direction = itemModel.get('direction');\n\n            var value = data.get('value', idx);\n\n            var phase = itemModel.get('phase');\n            phase = oldWave ? oldWave.shape.phase\n                : (phase === 'auto' ? idx * Math.PI / 4 : phase);\n\n            var defaultSpeed = function (maxSpeed) {\n                var cnt = data.count();\n                return cnt === 0 ? maxSpeed : maxSpeed *\n                    (0.2 + (cnt - idx) / cnt * 0.8);\n            };\n            var speed = 0;\n            if (maxSpeed === 'auto') {\n                speed = defaultSpeed(5000);\n            }\n            else {\n                speed = typeof maxSpeed === 'function'\n                    ? maxSpeed(value, idx) : maxSpeed;\n            }\n\n            // phase for moving left/right\n            var phaseOffset = 0;\n            if (direction === 'right' || direction == null) {\n                phaseOffset = Math.PI;\n            }\n            else if (direction === 'left') {\n                phaseOffset = -Math.PI;\n            }\n            else if (direction === 'none') {\n                phaseOffset = 0;\n            }\n            else {\n                console.error('Illegal direction value for liquid fill.');\n            }\n\n            // wave animation of moving left/right\n            if (direction !== 'none' && itemModel.get('waveAnimation')) {\n                wave\n                    .animate('shape', true)\n                    .when(0, {\n                        phase: phase\n                    })\n                    .when(speed / 2, {\n                        phase: phaseOffset + phase\n                    })\n                    .when(speed, {\n                        phase: phaseOffset * 2 + phase\n                    })\n                    .during(function () {\n                        if (wavePath) {\n                            wavePath.dirty(true);\n                        }\n                    })\n                    .start();\n            }\n        }\n\n        /**\n         * text on wave\n         */\n        function getText(waves) {\n            var labelModel = itemModel.getModel('label');\n\n            function formatLabel() {\n                var formatted = seriesModel.getFormattedLabel(0, 'normal');\n                var defaultVal = (data.get('value', 0) * 100);\n                var defaultLabel = data.getName(0) || seriesModel.name;\n                if (!isNaN(defaultVal)) {\n                    defaultLabel = defaultVal.toFixed(0) + '%';\n                }\n                return formatted == null ? defaultLabel : formatted;\n            }\n\n            var textOption = {\n                z2: 10,\n                shape: {\n                    x: left,\n                    y: top,\n                    width: (isFillContainer ? radius[0] : radius) * 2,\n                    height: (isFillContainer ? radius[1] : radius) * 2\n                },\n                style: {\n                    fill: 'transparent',\n                    text: formatLabel(),\n                    textAlign: labelModel.get('align'),\n                    textVerticalAlign: labelModel.get('baseline')\n                },\n                silent: true\n            };\n\n            var outsideTextRect = new echarts.graphic.Rect(textOption);\n            var color = labelModel.get('color');\n            echarts.graphic.setText(outsideTextRect.style, labelModel, color);\n\n            var insideTextRect = new echarts.graphic.Rect(textOption);\n            var insColor = labelModel.get('insideColor');\n            echarts.graphic.setText(insideTextRect.style, labelModel, insColor);\n            insideTextRect.style.textFill = insColor;\n\n            var group = new echarts.graphic.Group();\n            group.add(outsideTextRect);\n            group.add(insideTextRect);\n\n            // clip out waves for insideText\n            var boundingCircle = getPath(radius, true);\n\n            wavePath = new echarts.graphic.CompoundPath({\n                shape: {\n                    paths: waves\n                },\n                position: [cx, cy]\n            });\n\n            wavePath.setClipPath(boundingCircle);\n            insideTextRect.setClipPath(wavePath);\n\n            return group;\n        }\n    },\n\n    dispose: function () {\n        // dispose nothing here\n    }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}