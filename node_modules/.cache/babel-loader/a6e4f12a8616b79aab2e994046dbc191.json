{"ast":null,"code":"var ABBR = {\n  th: 3,\n  mi: 6,\n  bi: 9,\n  tr: 12\n};\nvar DEFAULT_OPTIONS = {\n  zeroFormat: null,\n  nullFormat: null,\n  defaultFormat: '0,0',\n  scalePercentBy100: true,\n  abbrLabel: {\n    th: 'k',\n    mi: 'm',\n    bi: 'b',\n    tr: 't'\n  }\n};\nvar TRILLION = 1e12;\nvar BILLION = 1e9;\nvar MILLION = 1e6;\nvar THOUSAND = 1e3;\n\nfunction numIsNaN(value) {\n  return typeof value === 'number' && isNaN(value);\n}\n\nfunction toFixed(value, maxDecimals, roundingFunction, optionals) {\n  var splitValue = value.toString().split('.');\n  var minDecimals = maxDecimals - (optionals || 0);\n  var boundedPrecision = splitValue.length === 2 ? Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals) : minDecimals;\n  var power = Math.pow(10, boundedPrecision);\n  var output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n  if (optionals > maxDecimals - boundedPrecision) {\n    var optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n    output = output.replace(optionalsRegExp, '');\n  }\n\n  return output;\n}\n\nfunction numberToFormat(options, value, format, roundingFunction) {\n  var abs = Math.abs(value);\n  var negP = false;\n  var optDec = false;\n  var abbr = '';\n  var decimal = '';\n  var neg = false;\n  var abbrForce = void 0;\n  var signed = void 0;\n  format = format || '';\n  value = value || 0;\n\n  if (~format.indexOf('(')) {\n    negP = true;\n    format = format.replace(/[(|)]/g, '');\n  } else if (~format.indexOf('+') || ~format.indexOf('-')) {\n    signed = ~format.indexOf('+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n    format = format.replace(/[+|-]/g, '');\n  }\n\n  if (~format.indexOf('a')) {\n    abbrForce = format.match(/a(k|m|b|t)?/);\n    abbrForce = abbrForce ? abbrForce[1] : false;\n    if (~format.indexOf(' a')) abbr = ' ';\n    format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n    if (abs >= TRILLION && !abbrForce || abbrForce === 't') {\n      abbr += options.abbrLabel.tr;\n      value = value / TRILLION;\n    } else if (abs < TRILLION && abs >= BILLION && !abbrForce || abbrForce === 'b') {\n      abbr += options.abbrLabel.bi;\n      value = value / BILLION;\n    } else if (abs < BILLION && abs >= MILLION && !abbrForce || abbrForce === 'm') {\n      abbr += options.abbrLabel.mi;\n      value = value / MILLION;\n    } else if (abs < MILLION && abs >= THOUSAND && !abbrForce || abbrForce === 'k') {\n      abbr += options.abbrLabel.th;\n      value = value / THOUSAND;\n    }\n  }\n\n  if (~format.indexOf('[.]')) {\n    optDec = true;\n    format = format.replace('[.]', '.');\n  }\n\n  var int = value.toString().split('.')[0];\n  var precision = format.split('.')[1];\n  var thousands = format.indexOf(',');\n  var leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n  if (precision) {\n    if (~precision.indexOf('[')) {\n      precision = precision.replace(']', '');\n      precision = precision.split('[');\n      decimal = toFixed(value, precision[0].length + precision[1].length, roundingFunction, precision[1].length);\n    } else {\n      decimal = toFixed(value, precision.length, roundingFunction);\n    }\n\n    int = decimal.split('.')[0];\n    decimal = ~decimal.indexOf('.') ? '.' + decimal.split('.')[1] : '';\n    if (optDec && +decimal.slice(1) === 0) decimal = '';\n  } else {\n    int = toFixed(value, 0, roundingFunction);\n  }\n\n  if (abbr && !abbrForce && +int >= 1000 && abbr !== ABBR.trillion) {\n    int = '' + +int / 1000;\n    abbr = ABBR.million;\n  }\n\n  if (~int.indexOf('-')) {\n    int = int.slice(1);\n    neg = true;\n  }\n\n  if (int.length < leadingCount) {\n    for (var i = leadingCount - int.length; i > 0; i--) {\n      int = '0' + int;\n    }\n  }\n\n  if (thousands > -1) {\n    int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + ',');\n  }\n\n  if (!format.indexOf('.')) int = '';\n  var output = int + decimal + (abbr || '');\n\n  if (negP) {\n    output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n  } else {\n    if (signed >= 0) {\n      output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n    } else if (neg) {\n      output = '-' + output;\n    }\n  }\n\n  return output;\n}\n\nfunction extend(target, sub) {\n  Object.keys(sub).forEach(function (key) {\n    target[key] = sub[key];\n  });\n}\n\nvar numerifyPercent = {\n  regexp: /%/,\n  format: function format(value, formatType, roundingFunction, numerify) {\n    var space = ~formatType.indexOf(' %') ? ' ' : '';\n    var output = void 0;\n    if (numerify.options.scalePercentBy100) value = value * 100;\n    formatType = formatType.replace(/\\s?%/, '');\n    output = numerify._numberToFormat(value, formatType, roundingFunction);\n\n    if (~output.indexOf(')')) {\n      output = output.split('');\n      output.splice(-1, 0, space + '%');\n      output = output.join('');\n    } else {\n      output = output + space + '%';\n    }\n\n    return output;\n  }\n};\nvar options = {};\nvar formats = {};\nextend(options, DEFAULT_OPTIONS);\n\nfunction format(value, formatType, roundingFunction) {\n  formatType = formatType || options.defaultFormat;\n  roundingFunction = roundingFunction || Math.round;\n  var output = void 0;\n  var formatFunction = void 0;\n\n  if (value === 0 && options.zeroFormat !== null) {\n    output = options.zeroFormat;\n  } else if (value === null && options.nullFormat !== null) {\n    output = options.nullFormat;\n  } else {\n    for (var kind in formats) {\n      if (formats[kind] && formatType.match(formats[kind].regexp)) {\n        formatFunction = formats[kind].format;\n        break;\n      }\n    }\n\n    formatFunction = formatFunction || numberToFormat.bind(null, options);\n    output = formatFunction(value, formatType, roundingFunction, numerify);\n  }\n\n  return output;\n}\n\nfunction numerify(input, formatType, roundingFunction) {\n  var value = void 0;\n\n  if (input === 0 || typeof input === 'undefined') {\n    value = 0;\n  } else if (input === null || numIsNaN(input)) {\n    value = null;\n  } else if (typeof input === 'string') {\n    if (options.zeroFormat && input === options.zeroFormat) {\n      value = 0;\n    } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n      value = null;\n    } else {\n      value = +input;\n    }\n  } else {\n    value = +input || null;\n  }\n\n  return format(value, formatType, roundingFunction);\n}\n\nnumerify.options = options;\nnumerify._numberToFormat = numberToFormat.bind(null, options);\n\nnumerify.register = function (name, format) {\n  formats[name] = format;\n};\n\nnumerify.unregister = function (name) {\n  formats[name] = null;\n};\n\nnumerify.setOptions = function (opts) {\n  extend(options, opts);\n};\n\nnumerify.reset = function () {\n  extend(options, DEFAULT_OPTIONS);\n};\n\nnumerify.register('percentage', numerifyPercent);\nexport default numerify;","map":{"version":3,"names":["ABBR","th","mi","bi","tr","DEFAULT_OPTIONS","zeroFormat","nullFormat","defaultFormat","scalePercentBy100","abbrLabel","TRILLION","BILLION","MILLION","THOUSAND","numIsNaN","value","isNaN","toFixed","maxDecimals","roundingFunction","optionals","splitValue","toString","split","minDecimals","boundedPrecision","length","Math","min","max","power","pow","output","optionalsRegExp","RegExp","replace","numberToFormat","options","format","abs","negP","optDec","abbr","decimal","neg","abbrForce","signed","indexOf","match","int","precision","thousands","leadingCount","slice","trillion","million","i","extend","target","sub","Object","keys","forEach","key","numerifyPercent","regexp","formatType","numerify","space","_numberToFormat","splice","join","formats","round","formatFunction","kind","bind","input","register","name","unregister","setOptions","opts","reset"],"sources":["D:/vue/Mao/node_modules/numerify/lib/index.es.js"],"sourcesContent":["var ABBR = {\n  th: 3,\n  mi: 6,\n  bi: 9,\n  tr: 12\n};\n\nvar DEFAULT_OPTIONS = {\n  zeroFormat: null,\n  nullFormat: null,\n  defaultFormat: '0,0',\n  scalePercentBy100: true,\n  abbrLabel: {\n    th: 'k',\n    mi: 'm',\n    bi: 'b',\n    tr: 't'\n  }\n};\n\nvar TRILLION = 1e12;\nvar BILLION = 1e9;\nvar MILLION = 1e6;\nvar THOUSAND = 1e3;\n\nfunction numIsNaN(value) {\n  return typeof value === 'number' && isNaN(value);\n}\n\nfunction toFixed(value, maxDecimals, roundingFunction, optionals) {\n  var splitValue = value.toString().split('.');\n  var minDecimals = maxDecimals - (optionals || 0);\n  var boundedPrecision = splitValue.length === 2 ? Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals) : minDecimals;\n  var power = Math.pow(10, boundedPrecision);\n  var output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n  if (optionals > maxDecimals - boundedPrecision) {\n    var optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n    output = output.replace(optionalsRegExp, '');\n  }\n\n  return output;\n}\n\nfunction numberToFormat(options, value, format, roundingFunction) {\n  var abs = Math.abs(value);\n  var negP = false;\n  var optDec = false;\n  var abbr = '';\n  var decimal = '';\n  var neg = false;\n  var abbrForce = void 0;\n  var signed = void 0;\n  format = format || '';\n\n  value = value || 0;\n\n  if (~format.indexOf('(')) {\n    negP = true;\n    format = format.replace(/[(|)]/g, '');\n  } else if (~format.indexOf('+') || ~format.indexOf('-')) {\n    signed = ~format.indexOf('+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n    format = format.replace(/[+|-]/g, '');\n  }\n  if (~format.indexOf('a')) {\n    abbrForce = format.match(/a(k|m|b|t)?/);\n\n    abbrForce = abbrForce ? abbrForce[1] : false;\n\n    if (~format.indexOf(' a')) abbr = ' ';\n    format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n    if (abs >= TRILLION && !abbrForce || abbrForce === 't') {\n      abbr += options.abbrLabel.tr;\n      value = value / TRILLION;\n    } else if (abs < TRILLION && abs >= BILLION && !abbrForce || abbrForce === 'b') {\n      abbr += options.abbrLabel.bi;\n      value = value / BILLION;\n    } else if (abs < BILLION && abs >= MILLION && !abbrForce || abbrForce === 'm') {\n      abbr += options.abbrLabel.mi;\n      value = value / MILLION;\n    } else if (abs < MILLION && abs >= THOUSAND && !abbrForce || abbrForce === 'k') {\n      abbr += options.abbrLabel.th;\n      value = value / THOUSAND;\n    }\n  }\n  if (~format.indexOf('[.]')) {\n    optDec = true;\n    format = format.replace('[.]', '.');\n  }\n  var int = value.toString().split('.')[0];\n  var precision = format.split('.')[1];\n  var thousands = format.indexOf(',');\n  var leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n  if (precision) {\n    if (~precision.indexOf('[')) {\n      precision = precision.replace(']', '');\n      precision = precision.split('[');\n      decimal = toFixed(value, precision[0].length + precision[1].length, roundingFunction, precision[1].length);\n    } else {\n      decimal = toFixed(value, precision.length, roundingFunction);\n    }\n\n    int = decimal.split('.')[0];\n    decimal = ~decimal.indexOf('.') ? '.' + decimal.split('.')[1] : '';\n    if (optDec && +decimal.slice(1) === 0) decimal = '';\n  } else {\n    int = toFixed(value, 0, roundingFunction);\n  }\n  if (abbr && !abbrForce && +int >= 1000 && abbr !== ABBR.trillion) {\n    int = '' + +int / 1000;\n    abbr = ABBR.million;\n  }\n  if (~int.indexOf('-')) {\n    int = int.slice(1);\n    neg = true;\n  }\n  if (int.length < leadingCount) {\n    for (var i = leadingCount - int.length; i > 0; i--) {\n      int = '0' + int;\n    }\n  }\n\n  if (thousands > -1) {\n    int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + ',');\n  }\n\n  if (!format.indexOf('.')) int = '';\n\n  var output = int + decimal + (abbr || '');\n\n  if (negP) {\n    output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n  } else {\n    if (signed >= 0) {\n      output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n    } else if (neg) {\n      output = '-' + output;\n    }\n  }\n\n  return output;\n}\n\nfunction extend(target, sub) {\n  Object.keys(sub).forEach(function (key) {\n    target[key] = sub[key];\n  });\n}\n\nvar numerifyPercent = {\n  regexp: /%/,\n  format: function format(value, formatType, roundingFunction, numerify) {\n    var space = ~formatType.indexOf(' %') ? ' ' : '';\n    var output = void 0;\n\n    if (numerify.options.scalePercentBy100) value = value * 100;\n\n    formatType = formatType.replace(/\\s?%/, '');\n\n    output = numerify._numberToFormat(value, formatType, roundingFunction);\n\n    if (~output.indexOf(')')) {\n      output = output.split('');\n      output.splice(-1, 0, space + '%');\n      output = output.join('');\n    } else {\n      output = output + space + '%';\n    }\n\n    return output;\n  }\n};\n\nvar options = {};\nvar formats = {};\n\nextend(options, DEFAULT_OPTIONS);\n\nfunction format(value, formatType, roundingFunction) {\n  formatType = formatType || options.defaultFormat;\n  roundingFunction = roundingFunction || Math.round;\n  var output = void 0;\n  var formatFunction = void 0;\n\n  if (value === 0 && options.zeroFormat !== null) {\n    output = options.zeroFormat;\n  } else if (value === null && options.nullFormat !== null) {\n    output = options.nullFormat;\n  } else {\n    for (var kind in formats) {\n      if (formats[kind] && formatType.match(formats[kind].regexp)) {\n        formatFunction = formats[kind].format;\n        break;\n      }\n    }\n    formatFunction = formatFunction || numberToFormat.bind(null, options);\n    output = formatFunction(value, formatType, roundingFunction, numerify);\n  }\n\n  return output;\n}\n\nfunction numerify(input, formatType, roundingFunction) {\n  var value = void 0;\n\n  if (input === 0 || typeof input === 'undefined') {\n    value = 0;\n  } else if (input === null || numIsNaN(input)) {\n    value = null;\n  } else if (typeof input === 'string') {\n    if (options.zeroFormat && input === options.zeroFormat) {\n      value = 0;\n    } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n      value = null;\n    } else {\n      value = +input;\n    }\n  } else {\n    value = +input || null;\n  }\n\n  return format(value, formatType, roundingFunction);\n}\n\nnumerify.options = options;\nnumerify._numberToFormat = numberToFormat.bind(null, options);\nnumerify.register = function (name, format) {\n  formats[name] = format;\n};\nnumerify.unregister = function (name) {\n  formats[name] = null;\n};\nnumerify.setOptions = function (opts) {\n  extend(options, opts);\n};\nnumerify.reset = function () {\n  extend(options, DEFAULT_OPTIONS);\n};\n\nnumerify.register('percentage', numerifyPercent);\n\nexport default numerify;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}